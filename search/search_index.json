{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Go Blueprint - Ultimate Golang Blueprint Library Powerful CLI tool designed to streamline the process of creating Go projects with a robust and standardized structure. Not only does Go Blueprint facilitate project initialization, but it also offers seamless integration with popular Go frameworks, allowing you to focus on your application's code from the very beginning. Why Choose Go Blueprint? Easy Setup and Installation : Go Blueprint simplifies the setup process, making it a breeze to install and get started with your Go projects. Pre-established Go Project Structure : Save time and effort by having the entire Go project structure set up automatically. No need to worry about directory layouts or configuration files. HTTP Server Configuration Made Easy : Whether you prefer Go's standard library HTTP package, Chi, Gin, Fiber, HttpRouter, Gorilla/mux or Echo, Go Blueprint caters to your server setup needs. Focus on Your Application Code : With Go Blueprint handling the project scaffolding, you can dedicate more time and energy to developing your application logic. Project Structure Here's an overview of the project structure created by Go Blueprint when all options are utilized: / (Root) \u251c\u2500\u2500 cmd/ \u2502 \u251c\u2500\u2500 api/ \u2502 \u2502 \u2514\u2500\u2500 main.go \u2502 \u2514\u2500\u2500 web/ \u2502 \u251c\u2500\u2500 js/ \u2502 \u2502 \u2514\u2500\u2500 htmx.min.js \u2502 \u251c\u2500\u2500 base.templ \u2502 \u251c\u2500\u2500 efs.go \u2502 \u251c\u2500\u2500 hello.go \u2502 \u2514\u2500\u2500 hello.templ \u251c\u2500\u2500 .github/ \u2502 \u2514\u2500\u2500 workflows/ \u2502 \u251c\u2500\u2500 go-test.yml \u2502 \u2514\u2500\u2500 release.yml \u251c\u2500\u2500 internal/ \u2502 \u251c\u2500\u2500 database/ \u2502 \u2502 \u2514\u2500\u2500 database.go \u2502 \u2514\u2500\u2500 server/ \u2502 \u251c\u2500\u2500 routes.go \u2502 \u2514\u2500\u2500 server.go \u251c\u2500\u2500 tests/ \u2502 \u2514\u2500\u2500 handler_test.go \u251c\u2500\u2500 .air.toml \u251c\u2500\u2500 docker-compose.yml \u251c\u2500\u2500 .env \u251c\u2500\u2500 .gitignore \u251c\u2500\u2500 go.mod \u251c\u2500\u2500 .goreleaser.yml \u251c\u2500\u2500 go.sum \u251c\u2500\u2500 Makefile \u2514\u2500\u2500 README.md cmd/ : Contains the entry points for your application. api/ : Main file ( main.go ). web/ : Main files for the web part of your application, including JavaScript ( js/ ), templates ( base.templ , efs.go , hello.go , hello.templ ). .github/ : GitHub Actions workflows for testing and releasing ( go-test.yml , release.yml ). internal/ : Internal packages or modules of your application. database/ : database.go file for handling database-related functionality. server/ : Files related to the server, such as routes.go for defining routes and server.go for server-related logic. tests/ : Test files, with handler_test.go as an example. .air.toml : Configuration file for Air , a live-reload utility for Go. docker-compose.yml : Configuration file for Docker Compose, defining DB config. .env : Environment configuration file. .gitignore : Gitignore file specifying which files and directories to ignore. go.mod and go.sum : Files used by Go modules to manage dependencies. .goreleaser.yml : Configuration file for GoReleaser , a tool for building and releasing Go binaries. Makefile : A Makefile for defining and running tasks or commands. README.md : The project's README file, containing essential information about the project, how to run it, and any other relevant details. This structure provides a comprehensive organization of your project, separating source code, tests, configurations and documentation.","title":"Home"},{"location":"#go-blueprint-ultimate-golang-blueprint-library","text":"Powerful CLI tool designed to streamline the process of creating Go projects with a robust and standardized structure. Not only does Go Blueprint facilitate project initialization, but it also offers seamless integration with popular Go frameworks, allowing you to focus on your application's code from the very beginning.","title":"Go Blueprint - Ultimate Golang Blueprint Library"},{"location":"#why-choose-go-blueprint","text":"Easy Setup and Installation : Go Blueprint simplifies the setup process, making it a breeze to install and get started with your Go projects. Pre-established Go Project Structure : Save time and effort by having the entire Go project structure set up automatically. No need to worry about directory layouts or configuration files. HTTP Server Configuration Made Easy : Whether you prefer Go's standard library HTTP package, Chi, Gin, Fiber, HttpRouter, Gorilla/mux or Echo, Go Blueprint caters to your server setup needs. Focus on Your Application Code : With Go Blueprint handling the project scaffolding, you can dedicate more time and energy to developing your application logic.","title":"Why Choose Go Blueprint?"},{"location":"#project-structure","text":"Here's an overview of the project structure created by Go Blueprint when all options are utilized: / (Root) \u251c\u2500\u2500 cmd/ \u2502 \u251c\u2500\u2500 api/ \u2502 \u2502 \u2514\u2500\u2500 main.go \u2502 \u2514\u2500\u2500 web/ \u2502 \u251c\u2500\u2500 js/ \u2502 \u2502 \u2514\u2500\u2500 htmx.min.js \u2502 \u251c\u2500\u2500 base.templ \u2502 \u251c\u2500\u2500 efs.go \u2502 \u251c\u2500\u2500 hello.go \u2502 \u2514\u2500\u2500 hello.templ \u251c\u2500\u2500 .github/ \u2502 \u2514\u2500\u2500 workflows/ \u2502 \u251c\u2500\u2500 go-test.yml \u2502 \u2514\u2500\u2500 release.yml \u251c\u2500\u2500 internal/ \u2502 \u251c\u2500\u2500 database/ \u2502 \u2502 \u2514\u2500\u2500 database.go \u2502 \u2514\u2500\u2500 server/ \u2502 \u251c\u2500\u2500 routes.go \u2502 \u2514\u2500\u2500 server.go \u251c\u2500\u2500 tests/ \u2502 \u2514\u2500\u2500 handler_test.go \u251c\u2500\u2500 .air.toml \u251c\u2500\u2500 docker-compose.yml \u251c\u2500\u2500 .env \u251c\u2500\u2500 .gitignore \u251c\u2500\u2500 go.mod \u251c\u2500\u2500 .goreleaser.yml \u251c\u2500\u2500 go.sum \u251c\u2500\u2500 Makefile \u2514\u2500\u2500 README.md cmd/ : Contains the entry points for your application. api/ : Main file ( main.go ). web/ : Main files for the web part of your application, including JavaScript ( js/ ), templates ( base.templ , efs.go , hello.go , hello.templ ). .github/ : GitHub Actions workflows for testing and releasing ( go-test.yml , release.yml ). internal/ : Internal packages or modules of your application. database/ : database.go file for handling database-related functionality. server/ : Files related to the server, such as routes.go for defining routes and server.go for server-related logic. tests/ : Test files, with handler_test.go as an example. .air.toml : Configuration file for Air , a live-reload utility for Go. docker-compose.yml : Configuration file for Docker Compose, defining DB config. .env : Environment configuration file. .gitignore : Gitignore file specifying which files and directories to ignore. go.mod and go.sum : Files used by Go modules to manage dependencies. .goreleaser.yml : Configuration file for GoReleaser , a tool for building and releasing Go binaries. Makefile : A Makefile for defining and running tasks or commands. README.md : The project's README file, containing essential information about the project, how to run it, and any other relevant details. This structure provides a comprehensive organization of your project, separating source code, tests, configurations and documentation.","title":"Project Structure"},{"location":"advanced-flag/","text":"Advanced Flag in Blueprint The --advanced flag in Blueprint serves as a switch to enable additional features during project creation. It is applied with the create command and unlocks the following features: HTMX Support using Templ: Enables the integration of HTMX support for dynamic web pages using Templ. CI/CD Workflow Setup using GitHub Actions: Automates the setup of a CI/CD workflow using GitHub Actions. Usage To utilize the --advanced flag, use the following command: go-blueprint create --name <project_name> --framework <selected_framework> --driver <selected_driver> --advanced By including the --advanced flag, users can choose one or both of the advanced features, HTMX support and GitHub Actions for CI/CD, during the project creation process. The flag enhances the simplicity of Blueprint while offering flexibility for users who require additional functionality. To recreate the project using the same configuration non-interactively, use the following command: go-blueprint create --name my-project --framework chi --driver mysql --advanced true HTMX Testing and Templ Setup After creating your project with HTMX support using the --advanced flag, you can test HTMX functionality on localhost:port/web . Navigate to Project Directory: cd my-project Install Templ CLI: go install github.com/a-h/templ/cmd/templ@latest Generate Templ Function Files: templ generate Start server: make run GoReleaser - Creating and Pushing Tags To create and push tags for builds using GoReleaser, follow these steps: Creating a Tag: When you're ready for a release, create a new tag in your Git repository. For example: git tag v1.0.0 Pushing the Tag: Push the tag to the repository to trigger GoReleaser: git push origin v1.0.0 By following these steps, you ensure that your project is properly tagged, triggering GoReleaser to create and publish releases as configured in the workflow. This approach simplifies the release process and automates the creation of distribution artifacts.","title":"Advanced Flag"},{"location":"advanced-flag/#advanced-flag-in-blueprint","text":"The --advanced flag in Blueprint serves as a switch to enable additional features during project creation. It is applied with the create command and unlocks the following features: HTMX Support using Templ: Enables the integration of HTMX support for dynamic web pages using Templ. CI/CD Workflow Setup using GitHub Actions: Automates the setup of a CI/CD workflow using GitHub Actions.","title":"Advanced Flag in Blueprint"},{"location":"advanced-flag/#usage","text":"To utilize the --advanced flag, use the following command: go-blueprint create --name <project_name> --framework <selected_framework> --driver <selected_driver> --advanced By including the --advanced flag, users can choose one or both of the advanced features, HTMX support and GitHub Actions for CI/CD, during the project creation process. The flag enhances the simplicity of Blueprint while offering flexibility for users who require additional functionality. To recreate the project using the same configuration non-interactively, use the following command: go-blueprint create --name my-project --framework chi --driver mysql --advanced true","title":"Usage"},{"location":"advanced-flag/#htmx-testing-and-templ-setup","text":"After creating your project with HTMX support using the --advanced flag, you can test HTMX functionality on localhost:port/web . Navigate to Project Directory: cd my-project Install Templ CLI: go install github.com/a-h/templ/cmd/templ@latest Generate Templ Function Files: templ generate Start server: make run","title":"HTMX Testing and Templ Setup"},{"location":"advanced-flag/#goreleaser-creating-and-pushing-tags","text":"To create and push tags for builds using GoReleaser, follow these steps: Creating a Tag: When you're ready for a release, create a new tag in your Git repository. For example: git tag v1.0.0 Pushing the Tag: Push the tag to the repository to trigger GoReleaser: git push origin v1.0.0 By following these steps, you ensure that your project is properly tagged, triggering GoReleaser to create and publish releases as configured in the workflow. This approach simplifies the release process and automates the creation of distribution artifacts.","title":"GoReleaser - Creating and Pushing Tags"},{"location":"creating-project/","text":"Creating a Project After installing the Go-Blueprint CLI tool, you can create a new project with the default settings by running the following command: go-blueprint create This command will interactively guide you through the project setup process, allowing you to choose the project name, framework, and database driver. Using Flags for Non-Interactive Setup For a non-interactive setup, you can use flags to provide the necessary information during project creation. Here's an example: go-blueprint create --name my-project --framework gin --driver postgres In this example: --name : Specifies the name of the project (replace \"my-project\" with your desired project name). --framework : Specifies the Go framework to be used (e.g., \"gin\"). --driver : Specifies the database driver to be integrated (e.g., \"postgres\"). Customize the flags according to your project requirements. Advanced Flag By including the --advanced flag, users can choose one or both of the advanced features, HTMX support and GitHub Actions for CI/CD, during the project creation process. The flag enhances the simplicity of Blueprint while offering flexibility for users who require additional functionality. To recreate the project using the same configuration non-interactively, use the following command: go-blueprint create --name my-project --framework chi --driver mysql --advanced true Makefile Project Management Build the Application: Compiles the application and generates the executable. make build Run the Application: Executes the application using go run make run Create DB Container: Utilizes Docker Compose to set up the database container. It includes a fallback for Docker Compose V1 make docker-run Shutdown DB Container: Stops and removes the database container. It also has a fallback for Docker Compose V1 make docker-down Test the Application: Executes tests defined in the ./tests directory make test Clean the Binary: Removes the generated binary file make clean Live Reload: Monitors file changes and automatically rebuilds and restarts the application using air make watch Using this Makefile simplifies common development tasks, making it easier to build, run, test, and manage dependencies in a Go project.","title":"Creating Project"},{"location":"creating-project/#creating-a-project","text":"After installing the Go-Blueprint CLI tool, you can create a new project with the default settings by running the following command: go-blueprint create This command will interactively guide you through the project setup process, allowing you to choose the project name, framework, and database driver.","title":"Creating a Project"},{"location":"creating-project/#using-flags-for-non-interactive-setup","text":"For a non-interactive setup, you can use flags to provide the necessary information during project creation. Here's an example: go-blueprint create --name my-project --framework gin --driver postgres In this example: --name : Specifies the name of the project (replace \"my-project\" with your desired project name). --framework : Specifies the Go framework to be used (e.g., \"gin\"). --driver : Specifies the database driver to be integrated (e.g., \"postgres\"). Customize the flags according to your project requirements.","title":"Using Flags for Non-Interactive Setup"},{"location":"creating-project/#advanced-flag","text":"By including the --advanced flag, users can choose one or both of the advanced features, HTMX support and GitHub Actions for CI/CD, during the project creation process. The flag enhances the simplicity of Blueprint while offering flexibility for users who require additional functionality. To recreate the project using the same configuration non-interactively, use the following command: go-blueprint create --name my-project --framework chi --driver mysql --advanced true","title":"Advanced Flag"},{"location":"creating-project/#makefile-project-management","text":"Build the Application: Compiles the application and generates the executable. make build Run the Application: Executes the application using go run make run Create DB Container: Utilizes Docker Compose to set up the database container. It includes a fallback for Docker Compose V1 make docker-run Shutdown DB Container: Stops and removes the database container. It also has a fallback for Docker Compose V1 make docker-down Test the Application: Executes tests defined in the ./tests directory make test Clean the Binary: Removes the generated binary file make clean Live Reload: Monitors file changes and automatically rebuilds and restarts the application using air make watch Using this Makefile simplifies common development tasks, making it easier to build, run, test, and manage dependencies in a Go project.","title":"Makefile Project Management"},{"location":"db-drivers/","text":"Database Drivers To extend the project with database functionality, users can choose from a variety of Go database drivers. Each driver is tailored to work with specific database systems, providing flexibility based on project requirements: Mysql : Enables seamless integration with MySQL databases. Postgres : Facilitates connectivity to PostgreSQL databases. Sqlite : Suitable for projects requiring a lightweight, self-contained database. Mongo : Provides necessary tools for connecting and interacting with MongoDB databases. Redis : Provides tools for connectiong and interacting with Redis Updated Project Structure Integrating a database adds a new layer to the project structure, primarily in the internal/database directory: /(Root) \u251c\u2500\u2500 /cmd \u2502 \u2514\u2500\u2500 /api \u2502 \u2514\u2500\u2500 main.go \u251c\u2500\u2500 /internal \u2502 \u251c\u2500\u2500 /database \u2502 \u2502 \u2514\u2500\u2500 database.go \u2502 \u2514\u2500\u2500 /server \u2502 \u251c\u2500\u2500 routes.go \u2502 \u2514\u2500\u2500 server.go \u251c\u2500\u2500 /tests \u2502 \u2514\u2500\u2500 handler_test.go \u251c\u2500\u2500 go.mod \u251c\u2500\u2500 go.sum \u251c\u2500\u2500 Makefile \u2514\u2500\u2500 README.md Database Driver Implementation Users can select the desired database driver based on their project's specific needs. The chosen driver is then imported into the project, and the database.go file is adjusted accordingly to establish a connection and manage interactions with the selected database. Docker-Compose for Quick Database Spinup To facilitate quick setup and testing, a docker-compose.yml file is provided. This file defines a service for the chosen database system with the necessary environment variables. Running docker-compose up will quickly spin up a containerized instance of the database, allowing users to test their application against a real database server. This Docker Compose approach simplifies the process of setting up a database for development or testing purposes, providing a convenient and reproducible environment for the project.","title":"DB Drivers"},{"location":"db-drivers/#database-drivers","text":"To extend the project with database functionality, users can choose from a variety of Go database drivers. Each driver is tailored to work with specific database systems, providing flexibility based on project requirements: Mysql : Enables seamless integration with MySQL databases. Postgres : Facilitates connectivity to PostgreSQL databases. Sqlite : Suitable for projects requiring a lightweight, self-contained database. Mongo : Provides necessary tools for connecting and interacting with MongoDB databases. Redis : Provides tools for connectiong and interacting with Redis","title":"Database Drivers"},{"location":"db-drivers/#updated-project-structure","text":"Integrating a database adds a new layer to the project structure, primarily in the internal/database directory: /(Root) \u251c\u2500\u2500 /cmd \u2502 \u2514\u2500\u2500 /api \u2502 \u2514\u2500\u2500 main.go \u251c\u2500\u2500 /internal \u2502 \u251c\u2500\u2500 /database \u2502 \u2502 \u2514\u2500\u2500 database.go \u2502 \u2514\u2500\u2500 /server \u2502 \u251c\u2500\u2500 routes.go \u2502 \u2514\u2500\u2500 server.go \u251c\u2500\u2500 /tests \u2502 \u2514\u2500\u2500 handler_test.go \u251c\u2500\u2500 go.mod \u251c\u2500\u2500 go.sum \u251c\u2500\u2500 Makefile \u2514\u2500\u2500 README.md","title":"Updated Project Structure"},{"location":"db-drivers/#database-driver-implementation","text":"Users can select the desired database driver based on their project's specific needs. The chosen driver is then imported into the project, and the database.go file is adjusted accordingly to establish a connection and manage interactions with the selected database.","title":"Database Driver Implementation"},{"location":"db-drivers/#docker-compose-for-quick-database-spinup","text":"To facilitate quick setup and testing, a docker-compose.yml file is provided. This file defines a service for the chosen database system with the necessary environment variables. Running docker-compose up will quickly spin up a containerized instance of the database, allowing users to test their application against a real database server. This Docker Compose approach simplifies the process of setting up a database for development or testing purposes, providing a convenient and reproducible environment for the project.","title":"Docker-Compose for Quick Database Spinup"},{"location":"frameworks/","text":"Frameworks Created project can utilizes several Go web frameworks to handle HTTP routing and server functionality. The chosen frameworks are: Chi : Lightweight and flexible router for building Go HTTP services. Gin : A web framework with a martini-like API, but with much better performance. Fiber : Express-inspired web framework designed to be fast, simple, and efficient. HttpRouter : A high-performance HTTP request router that scales well. Gorilla/mux : A powerful URL router and dispatcher for golang. Echo : High-performance, extensible, minimalist Go web framework. Project Structure The project is structured with a simple layout, focusing on the cmd, internal, and tests directories: /(Root) \u251c\u2500\u2500 /cmd \u2502 \u2514\u2500\u2500 /api \u2502 \u2514\u2500\u2500 main.go \u251c\u2500\u2500 /internal \u2502 \u2514\u2500\u2500 /server \u2502 \u251c\u2500\u2500 routes.go \u2502 \u2514\u2500\u2500 server.go \u251c\u2500\u2500 /tests \u2502 \u2514\u2500\u2500 handler_test.go \u251c\u2500\u2500 go.mod \u251c\u2500\u2500 go.sum \u251c\u2500\u2500 Makefile \u2514\u2500\u2500 README.md","title":"Frameworks"},{"location":"frameworks/#frameworks","text":"Created project can utilizes several Go web frameworks to handle HTTP routing and server functionality. The chosen frameworks are: Chi : Lightweight and flexible router for building Go HTTP services. Gin : A web framework with a martini-like API, but with much better performance. Fiber : Express-inspired web framework designed to be fast, simple, and efficient. HttpRouter : A high-performance HTTP request router that scales well. Gorilla/mux : A powerful URL router and dispatcher for golang. Echo : High-performance, extensible, minimalist Go web framework.","title":"Frameworks"},{"location":"frameworks/#project-structure","text":"The project is structured with a simple layout, focusing on the cmd, internal, and tests directories: /(Root) \u251c\u2500\u2500 /cmd \u2502 \u2514\u2500\u2500 /api \u2502 \u2514\u2500\u2500 main.go \u251c\u2500\u2500 /internal \u2502 \u2514\u2500\u2500 /server \u2502 \u251c\u2500\u2500 routes.go \u2502 \u2514\u2500\u2500 server.go \u251c\u2500\u2500 /tests \u2502 \u2514\u2500\u2500 handler_test.go \u251c\u2500\u2500 go.mod \u251c\u2500\u2500 go.sum \u251c\u2500\u2500 Makefile \u2514\u2500\u2500 README.md","title":"Project Structure"},{"location":"installation/","text":"Installation Go-Blueprint provides a convenient CLI tool to effortlessly set up your Go projects. Follow the steps below to install the tool on your system. Binary Installation To install the Go-Blueprint CLI tool as a binary, Run the following command: go install github.com/melkeydev/go-blueprint@latest This command installs the Go-Blueprint binary, automatically binding it to your $GOPATH . Building and Installing from Source If you prefer to build and install Go-Blueprint directly from the source code, you can follow these steps: Clone the Go-Blueprint repository from GitHub: git clone https://github.com/melkeydev/go-blueprint Build the Go-Blueprint binary: go build Install in your $PATH to make it accessible system-wide: go install Verify the installation by running: go-blueprint version This should display the version information of the installed Go-Blueprint. Now you have successfully built and installed Go-Blueprint from the source code.","title":"Installation"},{"location":"installation/#installation","text":"Go-Blueprint provides a convenient CLI tool to effortlessly set up your Go projects. Follow the steps below to install the tool on your system.","title":"Installation"},{"location":"installation/#binary-installation","text":"To install the Go-Blueprint CLI tool as a binary, Run the following command: go install github.com/melkeydev/go-blueprint@latest This command installs the Go-Blueprint binary, automatically binding it to your $GOPATH .","title":"Binary Installation"},{"location":"installation/#building-and-installing-from-source","text":"If you prefer to build and install Go-Blueprint directly from the source code, you can follow these steps: Clone the Go-Blueprint repository from GitHub: git clone https://github.com/melkeydev/go-blueprint Build the Go-Blueprint binary: go build Install in your $PATH to make it accessible system-wide: go install Verify the installation by running: go-blueprint version This should display the version information of the installed Go-Blueprint. Now you have successfully built and installed Go-Blueprint from the source code.","title":"Building and Installing from Source"}]}